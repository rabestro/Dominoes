type: edu
files:
- name: tests.py
  visible: false
  text: |
    from typing import List, Any
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from hstest.check_result import CheckResult
    import ast
    from hstest import *


    class TestStage1(StageTest):

        def generate(self) -> List[TestCase]:
            return [
                TestCase(),
                TestCase(),
                TestCase(),
                TestCase(),
                TestCase()
            ]

        def get_list(self, replyks):
            ind = replyks.find('[')
            try:
                return ast.literal_eval(replyks[ind:])
            except (ValueError, SyntaxError):
                raise WrongAnswer("An error occurred while processing your output.\n"
                                           "Please make sure that your program's output is formatted exactly as described.")


        def get_all_lists(self, replyk):
            sp = self.get_list(replyk[0])
            cp = self.get_list(replyk[1])
            pp = self.get_list(replyk[2])
            ds = self.get_list(replyk[3])
            return sp, cp, pp, ds

        def get_the_fish(self, cp, pp, ds):
            st = 'computer' if len(cp) == 7 else 'player'
            cp = sorted([i for i in cp if i[0] == i[1]], reverse=True)
            pp = sorted([i for i in pp if i[0] == i[1]], reverse=True)
            c0 = cp[0] if len(cp) > 0 else []
            p0 = pp[0] if len(pp) > 0 else []
            maxes = sorted([ds[0], c0, p0], reverse=True)
            return maxes[0], st

        def check_nested_lists(self, list_to_check, list_name):
            if list_to_check and type(list_to_check[0]) != list:
                raise WrongAnswer("{0} list in your output is not a nested list. \n"
                                  "Please, make it a nested list.".format(list_name))

        def count_unique(self, replyk):
            sp, cp, pp, ds = self.get_all_lists(replyk)
            self.check_nested_lists(sp, "Stock pieces")
            self.check_nested_lists(cp, "Computer pieces")
            self.check_nested_lists(pp, "Player pieces")
            self.check_nested_lists(ds, "Domino snake")
            sp += cp
            sp += pp
            sp += ds
            sp = [tuple(i) for i in sp]
            return (len(set(sp)))

        def check(self, reply: list, attach: Any) -> CheckResult:
            replyk = reply.strip().split('\n')
            if len(replyk) != 5:
                return CheckResult.wrong("Something's wrong")
            stock_pieces, computer_pieces, player_pieces, domino_snake = self.get_all_lists(replyk)
            if not self.count_unique(replyk):
                return CheckResult.wrong("The full set is not right")
            if len(stock_pieces) != 14:
                return CheckResult.wrong("Stock pieces are not full")
            if len(stock_pieces) + len(computer_pieces) + len(player_pieces) + len(domino_snake) != 28:
                return CheckResult.wrong("The full set is not full")
            if len(computer_pieces) + len(player_pieces) + len(domino_snake) != 14:
                return CheckResult.wrong("The pieces played are not right")
            domino_snake_check, status_check = self.get_the_fish(computer_pieces, player_pieces, domino_snake)
            if domino_snake[0] != domino_snake_check:
                return CheckResult.wrong("Domino snake is not right")
            if status_check not in replyk[4]:
                return CheckResult.wrong("Status is not right")

            return CheckResult.correct()


    if __name__ == '__main__':
        TestStage1('dominoes.dominoes').run_tests()
  learner_created: false
- name: dominoes/dominoes.py
  visible: true
  text: |
    # Write your code here
  learner_created: false
feedback_link: https://hyperskill.org/projects/146/stages/786/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 08 Apr 2021 15:46:54 UTC
record: 1
